package prismacloudcompute

import (
	"fmt"
	"time"

	"github.com/paloaltonetworks/prisma-cloud-compute-go/pcc"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policy"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourcePoliciesVulnerabilityHost() *schema.Resource {
	return &schema.Resource{
		Create: createPolicyVulnerabilityHost,
		Read:   readPolicyVulnerabilityHost,
		Update: updatePolicyVulnerabilityHost,
		Delete: deletePolicyVulnerabilityHost,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"rule": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "List of policy rules.",
				MinItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alert_threshold": {
							Type:        schema.TypeList,
							MaxItems:    1,
							Optional:    true,
							Description: "The alert threshold.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether or not to suppress all vulnerability alerts.",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Minimum severity to trigger alerts. Supported values range from 0 to 9, where 0=off, 1=low, 4=medium, 7=high, and 9=critical.",
									},
								},
							},
						},
						"collections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of collections used to scope the rule.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"cve_rule": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of Common Vulnerability and Exposure (CVE) IDs classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"expiration": {
										Type:        schema.TypeList,
										MaxItems:    1,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Date of the vulnerability expiration.",
													Default:     "0001-01-01T00:00:00Z",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
													Default:     false,
												},
											},
										},
									},
									"id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "CVE ID",
									},
								},
							},
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', the rule is currently disabled.",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The effect of evaluating the given policy. Can be set to 'allow', 'deny', 'block', or 'alert'.",
						},
						"grace_days": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Number of days to suppress the rule's block effect. Measured from date the vulnerability was fixed. If there's no fix, measured from the date the vulnerability was published.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Name of the rule.",
						},
						"notes": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Free-form text notes.",
						},
						"only_fixed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', applies rule only when vendor fixes are available.",
						},
						"tag_rule": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of tags classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"expiration": {
										Type:        schema.TypeList,
										MaxItems:    1,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Date of the vulnerability expiration.",
													Default:     "0001-01-01T00:00:00Z",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
													Default:     false,
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Tag name.",
									},
								},
							},
						},
						"verbose": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', displays a detailed message when an operation is blocked.",
						},
					},
				},
			},
		},
	}
}

func createPolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	parsedPolicy, err := parsePolicyVulnerabilityHost(d)
	if err != nil {
		return fmt.Errorf("error creating %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	if err := policy.UpdateVulnerabilityHost(*client, *parsedPolicy); err != nil {
		return fmt.Errorf("error creating %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	d.SetId(policyTypeVulnerabilityHost)
	return readPolicyVulnerabilityHost(d, meta)
}

func readPolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	retrievedPolicy, err := policy.GetVulnerabilityHost(*client)
	if err != nil {
		return fmt.Errorf("error reading %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	if err := d.Set("rule", flattenPolicyVulnerabilityHostRules(retrievedPolicy.Rules)); err != nil {
		return fmt.Errorf("error reading %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	return nil
}

func updatePolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	parsedPolicy, err := parsePolicyVulnerabilityHost(d)
	if err != nil {
		return fmt.Errorf("error updating %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	if err := policy.UpdateVulnerabilityHost(*client, *parsedPolicy); err != nil {
		return fmt.Errorf("error updating %s policy: %s", policyTypeVulnerabilityHost, err)
	}

	return readPolicyVulnerabilityHost(d, meta)
}

func deletePolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	// TODO: reset to default policy
	return nil
}

func parsePolicyVulnerabilityHost(d *schema.ResourceData) (*policy.VulnerabilityHostPolicy, error) {
	parsedPolicy := policy.VulnerabilityHostPolicy{
		Type:  policyTypeVulnerabilityHost,
		Rules: make([]policy.VulnerabilityHostRule, 0),
	}
	if rules, ok := d.GetOk("rule"); ok {
		rulesList := rules.([]interface{})
		parsedRules := make([]policy.VulnerabilityHostRule, 0, len(rulesList))
		for _, val := range rulesList {
			rule := val.(map[string]interface{})
			parsedRule := policy.VulnerabilityHostRule{}

			parsedRule.AlertThreshold = parseVulnerabilityHostThreshold(rule["alert_threshold"].([]interface{}))
			parsedRule.Collections = parseCollections(rule["collections"].([]interface{}))
			parsedRule.CveRules = parseVulnerabilityHostCveRules(rule["cve_rule"].([]interface{}))
			parsedRule.Disabled = rule["disabled"].(bool)
			parsedRule.Effect = rule["effect"].(string)
			parsedRule.GraceDays = rule["grace_days"].(int)
			parsedRule.Name = rule["name"].(string)
			parsedRule.Notes = rule["notes"].(string)
			parsedRule.OnlyFixed = rule["only_fixed"].(bool)
			parsedRule.TagRules = parseVulnerabilityHostTagRules(rule["tag_rule"].([]interface{}))
			parsedRule.Verbose = rule["verbose"].(bool)

			parsedRules = append(parsedRules, parsedRule)
		}
		parsedPolicy.Rules = parsedRules
	}
	return &parsedPolicy, nil
}

func parseVulnerabilityHostThreshold(in []interface{}) policy.VulnerabilityHostThreshold {
	parsedThreshold := policy.VulnerabilityHostThreshold{}
	if in[0] == nil {
		return parsedThreshold
	}
	presentThreshold := in[0].(map[string]interface{})
	if presentThreshold["disabled"] != nil {
		parsedThreshold.Disabled = presentThreshold["disabled"].(bool)
	}
	if presentThreshold["value"] != nil {
		parsedThreshold.Value = presentThreshold["value"].(int)
	}
	return parsedThreshold
}

func parseVulnerabilityHostCveRules(in []interface{}) []policy.VulnerabilityHostCveRule {
	parsedCveRules := make([]policy.VulnerabilityHostCveRule, 0, len(in))
	for _, val := range in {
		presentCveRule := val.(map[string]interface{})
		parsedCveRule := policy.VulnerabilityHostCveRule{}
		if presentCveRule["description"] != nil {
			parsedCveRule.Description = presentCveRule["description"].(string)
		}
		if presentCveRule["effect"] != nil {
			parsedCveRule.Effect = presentCveRule["effect"].(string)
		}
		if presentCveRule["expiration"] != nil {
			parsedCveRule.Expiration = parseVulnerabilityHostExpiration(presentCveRule["expiration"].([]interface{}))
		}
		if presentCveRule["id"] != nil {
			parsedCveRule.Id = presentCveRule["id"].(string)
		}
		parsedCveRules = append(parsedCveRules, parsedCveRule)
	}
	return parsedCveRules
}

func parseVulnerabilityHostTagRules(in []interface{}) []policy.VulnerabilityHostTagRule {
	parsedTagRules := make([]policy.VulnerabilityHostTagRule, 0, len(in))
	for _, val := range in {
		presentTagRule := val.(map[string]interface{})
		parsedTagRule := policy.VulnerabilityHostTagRule{}
		if presentTagRule["description"] != nil {
			parsedTagRule.Description = presentTagRule["description"].(string)
		}
		if presentTagRule["effect"] != nil {
			parsedTagRule.Effect = presentTagRule["effect"].(string)
		}
		if presentTagRule["expiration"] != nil {
			parsedTagRule.Expiration = parseVulnerabilityHostExpiration(presentTagRule["expiration"].([]interface{}))
		}
		if presentTagRule["id"] != nil {
			parsedTagRule.Name = presentTagRule["name"].(string)
		}
		parsedTagRules = append(parsedTagRules, parsedTagRule)
	}
	return parsedTagRules
}

func parseVulnerabilityHostExpiration(in []interface{}) policy.VulnerabilityHostExpiration {
	parsedExpiration := policy.VulnerabilityHostExpiration{}
	if in[0] == nil {
		return parsedExpiration
	}
	presentExpiration := in[0].(map[string]interface{})
	if presentExpiration["date"] != nil {
		parsedExpiration.Date = presentExpiration["date"].(string)
	}
	if presentExpiration["enabled"] != nil {
		parsedExpiration.Enabled = presentExpiration["enabled"].(bool)
	}
	return parsedExpiration
}

func flattenPolicyVulnerabilityHostRules(in []policy.VulnerabilityHostRule) []interface{} {
	ans := make([]interface{}, 0, len(in))
	for _, val := range in {
		m := make(map[string]interface{})
		m["alert_threshold"] = flattenVulnerabilityHostAlertThreshold(val.AlertThreshold)
		m["collections"] = flattenCollections(val.Collections)
		m["cve_rule"] = flattenVulnerabilityHostCveRules(val.CveRules)
		m["disabled"] = val.Disabled
		m["effect"] = val.Effect
		m["grace_days"] = val.GraceDays
		m["name"] = val.Name
		m["notes"] = val.Notes
		m["only_fixed"] = val.OnlyFixed
		m["tag_rule"] = flattenVulnerabilityHostTagRules(val.TagRules)
		m["verbose"] = val.Verbose
		ans = append(ans, m)
	}
	return ans
}
