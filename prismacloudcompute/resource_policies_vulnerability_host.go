package prismacloudcompute

import (
	"fmt"
	"time"

	pcc "github.com/paloaltonetworks/prisma-cloud-compute-go"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policies"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourcePoliciesVulnerabilityHost() *schema.Resource {
	return &schema.Resource{
		Create: createPolicyVulnerabilityHost,
		Read:   readPolicyVulnerabilityHost,
		Update: updatePolicyVulnerabilityHost,
		Delete: deletePolicyVulnerabilityHost,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "ID of the policy set.",
				Default:     policyTypeVulnerabilityHost,
			},
			"policytype": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Type of policy. For example: 'docker', 'containerVulnerability', 'containerCompliance', etc.",
				Default:     policyTypeVulnerabilityHost,
			},
			"rule": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "List of policy rules.",
				MinItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alertthreshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "The alert threshold.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether or not to suppress all vulnerability alerts.",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Minimum severity to trigger alerts. Supported values range from 0 to 9, where 0=off, 1=low, 4=medium, 7=high, and 9=critical.",
									},
								},
							},
						},
						"collections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of collections used to scope the rule.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"cverules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of Common Vulnerability and Exposure (CVE) IDs classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "CVE ID",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "The date the vulnerability expires.",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
												},
											},
										},
									},
								},
							},
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', the rule is currently disabled.",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The effect of evaluating the given policy. Can be set to 'allow', 'deny', 'block', or 'alert'.",
						},
						"gracedays": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Number of days to suppress the rule's block effect. Measured from date the vulnerability was fixed. If there's no fix, measured from the date the vulnerability was published.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Name of the rule.",
						},
						"notes": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Free-form text notes.",
						},
						"onlyfixed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', applies rule only when vendor fixes are available.",
						},
						"tags": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of tags classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Date of the vulnerability expiration.",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Tag name.",
									},
								},
							},
						},
						"verbose": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', displays a detailed message when an operation is blocked.",
						},
					},
				},
			},
		},
	}
}

func parsePolicyVulnerabilityHost(d *schema.ResourceData, policyID string) policies.Policy {
	policy := parsePolicy(d, policyID, d.Get("policytype").(string))
	for _, v := range policy.Rules {
		v.Action = []string{""}
		v.Condition = policies.Condition{}
		v.Group = []string{""}
		v.License = policies.License{}
		v.Principal = []string{""}
	}
	return policy
}

func createPolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	obj := parsePolicyVulnerabilityHost(d, "")

	if err := policies.Update(*client, policies.VulnerabilityHostEndpoint, obj); err != nil {
		return err
	}

	pol, err := policies.Get(*client, policies.VulnerabilityHostEndpoint)
	if err != nil {
		return err
	}

	d.SetId(pol.PolicyId)
	return readPolicyVulnerabilityHost(d, meta)
}

func readPolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)

	obj, err := policies.Get(*client, policies.VulnerabilityHostEndpoint)
	if err != nil {
		return err
	}

	d.Set("_id", policyTypeVulnerabilityHost)
	d.Set("policytype", policyTypeVulnerabilityHost)
	if err := d.Set("rule", obj.Rules); err != nil {
		return fmt.Errorf("error setting rule for resource %s: %s", d.Id(), err)
	}

	return nil
}

func updatePolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	id := d.Id()
	obj := parsePolicyVulnerabilityHost(d, id)

	if err := policies.Update(*client, policies.VulnerabilityHostEndpoint, obj); err != nil {
		return err
	}

	return readPolicyVulnerabilityHost(d, meta)
}

func deletePolicyVulnerabilityHost(d *schema.ResourceData, meta interface{}) error {
	/*	client := meta.(*pcc.Client)
		id := d.Id()

		err := policy.Delete(client, id)
		if err != nil {
			if err != pcc.ObjectNotFoundError {
				return err
			}
		}*/

	d.SetId("")
	return nil
}
