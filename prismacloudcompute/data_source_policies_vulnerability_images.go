package prismacloudcompute

import (
	"log"

	pc "github.com/paloaltonetworks/prisma-cloud-compute-go"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policy/policyVulnerabilityImages"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func dataSourcePoliciesVulnerabilityImages() *schema.Resource {
	return &schema.Resource{
		Read: dataSourcePoliciesVulnerabilityImagesRead,

		Schema: map[string]*schema.Schema{
			// Input.
			"filters": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: "Filter policy results",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			// Output.
			"_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "ID of the policy set",
			},
			"policytype": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Type of policy",
			},
			"rules": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "List of policy rules",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "action",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"alertthreshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "alertthreshold",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "enabled",
									},
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "disabled",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "value",
									},
								},
							},
						},
						"allcompliance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "allCompliance",
						},
						"auditallowed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "auditAllowed",
						},
						"blockmsg": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "blockMsg",
						},
						"blockthreshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "blockThreshold",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "enabled",
									},
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "disabled",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "value",
									},
								},
							},
						},
						"collections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of collections. Used to scope the rule.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									// Output.
									"accountids": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Account IDs",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"appids": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "App IDs",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"clusters": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Clusters",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"coderepos": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Code repositories",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"color": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Color",
									},
									"containers": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Containers",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Description",
									},
									"functions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Serverless functions",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"hosts": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Hosts",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"images": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Images",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"labels": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Labels",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"modified": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Last modified date",
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Name",
									},
									"namespaces": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Namespaces",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"owner": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Owner",
									},
									"prisma": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Prisma",
									},
									"system": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "System",
									},
								},
							},
						},
						"condition": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "condition",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"device": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "device",
									},
									"readonly": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "readonly",
									},
									"vulnerabilities": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "vulnerabilities",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"block": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "block",
												},
												"id": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "id",
												},
											},
										},
									},
								},
							},
						},
						"cverules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "cveRules",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "description",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "effect",
									},
									"id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "id",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "expiration",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "date",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
											},
										},
									},
								},
							},
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "disabled",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "effect",
						},
						"gracedays": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "graceDays",
						},
						"group": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "group",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"license": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "license",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"alertThreshold": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "alertthreshold",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
												"disabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "disabled",
												},
												"value": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "value",
												},
											},
										},
									},
									"blockThreshold": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "blockThreshold",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
												"disabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "disabled",
												},
												"value": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "value",
												},
											},
										},
									},
									"critical": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "critical",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"high": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "high",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"low": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "low",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"medium": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "medium",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"modified": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "modified",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "name",
						},
						"notes": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "notes",
						},
						"onlyfixed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "onlyFixed",
						},
						"owner": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "owner",
						},
						"previousname": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "previousName",
						},
						"principal": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "principal",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"tags": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "tags",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "description",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "effect",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "expiration",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "date",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "name",
									},
								},
							},
						},
						"verbose": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "verbose",
						},
					},
				},
			},
		},
	}
}

func dataSourcePoliciesVulnerabilityImagesRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pc.Client)

	i, err := policyVulnerabilityImages.Get(client)
	if err != nil {
		return err
	}

	d.SetId(i.PolicyId)

	list := make([]interface{}, 0, 1)
	list = append(list, map[string]interface{}{
		"_id":        i.PolicyId,
		"policyType": i.PolicyType,
		"rules":      i.Rules,
	})

	if err := d.Set("listing", list); err != nil {
		log.Printf("[WARN] Error setting 'listing' field for %q: %s", d.Id(), err)
	}

	return nil
}
