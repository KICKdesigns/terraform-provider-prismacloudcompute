package prismacloudcompute

import (
	"fmt"
	"time"

	pcc "github.com/paloaltonetworks/prisma-cloud-compute-go"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policy"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourcePoliciesVulnerabilityImages() *schema.Resource {
	return &schema.Resource{
		Create: createPolicyVulnerabilityImages,
		Read:   readPolicyVulnerabilityImages,
		Update: updatePolicyVulnerabilityImages,
		Delete: deletePolicyVulnerabilityImages,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "ID of the policy set.",
				Default:     policyTypeVulnerabilityImages,
			},
			"policy_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Type of policy. For example: 'docker', 'containerVulnerability', 'containerCompliance', etc.",
				Default:     policyTypeVulnerabilityImages,
			},
			"rule": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "List of policy rules.",
				MinItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alert_threshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "The alert threshold.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether or not to suppress all vulnerability alerts.",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Minimum severity to trigger alerts. Supported values range from 0 to 9, where 0=off, 1=low, 4=medium, 7=high, and 9=critical.",
									},
								},
							},
						},
						"block_message": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Represents the block message in a policy.",
						},
						"block_threshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "The vulnerability policy block threshold. Threshold values typically vary between 0 and 10 (non-inclusive).",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "Whether or not to block when vulnerabilities are found.",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "Minimum severity to trigger alerts. Supported values range from 0 to 9, where 0=off, 1=low, 4=medium, 7=high, and 9=critical.",
									},
								},
							},
						},
						"collections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of collections used to scope the rule.",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"cve_rule": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of Common Vulnerability and Exposure (CVE) IDs classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Date of the vulnerability expiration.",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
												},
											},
										},
									},
									"id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "CVE ID",
									},
								},
							},
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', the rule is currently disabled.",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The effect of evaluating the given policy. Can be set to 'allow', 'deny', 'block', or 'alert'.",
						},
						"grace_days": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Number of days to suppress the rule's block effect. Measured from date the vulnerability was fixed. If there's no fix, measured from the date the vulnerability was published.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Name of the rule.",
						},
						"notes": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Free-form text notes.",
						},
						"only_fixed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', applies rule only when vendor fixes are available.",
						},
						"tags": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of tags classified for special handling/exceptions.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Free-form text for documenting the exception.",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Specifies the relevant action for a vulnerability. Can be set to 'ignore', 'alert', or 'block'.",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "The vulnerability expiration date.",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "Date of the vulnerability expiration.",
													Default:     "0001-01-01T00:00:00Z",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "If set to 'true', the grace period is enabled.",
													Default:     false,
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Tag name.",
									},
								},
							},
						},
						"verbose": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to 'true', displays a detailed message when an operation is blocked.",
						},
					},
				},
			},
		},
	}
}

func parsePolicyVulnerabilityImages(d *schema.ResourceData, policyId string) (*policy.Policy, error) {
	parsedPolicy, err := parsePolicy(d, policyId, d.Get("policy_type").(string))
	if err != nil {
		return nil, fmt.Errorf("error parsing %s policy: %s", policyId, err)
	}
	for _, v := range parsedPolicy.Rules {
		v.Action = []string{""}
		v.Condition = policy.Condition{}
		v.Group = []string{""}
		v.License = policy.License{}
		v.Principal = []string{""}
	}
	return parsedPolicy, nil
}

func flattenPolicyVulnerabilityImagesRules(in []policy.Rule) []interface{} {
	ans := make([]interface{}, 0, len(in))
	for _, val := range in {
		m := make(map[string]interface{})
		m["alert_threshold"] = flattenAlertThreshold(val.AlertThreshold)
		m["block_message"] = val.BlockMsg
		m["block_threshold"] = flattenBlockThreshold(val.BlockThreshold)
		m["collections"] = flattenCollections(val.Collections)
		m["cve_rule"] = flattenCveRules(val.CveRules)
		m["disabled"] = val.Disabled
		m["effect"] = val.Effect
		m["grace_days"] = val.GraceDays
		m["name"] = val.Name
		m["notes"] = val.Notes
		m["only_fixed"] = val.OnlyFixed
		m["tags"] = flattenTags(val.Tags)
		m["verbose"] = val.Verbose
		ans = append(ans, m)
	}
	return ans
}

func createPolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	parsedPolicy, err := parsePolicyVulnerabilityImages(d, "")
	if err != nil {
		return fmt.Errorf("error creating %s policy: %s", policyTypeVulnerabilityImages, err)
	}

	if err := policy.Update(*client, policy.VulnerabilityImagesEndpoint, *parsedPolicy); err != nil {
		return err
	}

	pol, err := policy.Get(*client, policy.VulnerabilityImagesEndpoint)
	if err != nil {
		return err
	}

	d.SetId(pol.PolicyId)
	return readPolicyVulnerabilityImages(d, meta)
}

func readPolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)

	retrievedPolicy, err := policy.Get(*client, policy.VulnerabilityImagesEndpoint)
	if err != nil {
		return err
	}

	d.Set("_id", policyTypeVulnerabilityImages)
	d.Set("policy_type", policyTypeVulnerabilityImages)
	if err := d.Set("rule", flattenPolicyVulnerabilityImagesRules(retrievedPolicy.Rules)); err != nil {
		return fmt.Errorf("error setting rule for resource %s: %s", d.Id(), err)
	}

	return nil
}

func updatePolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pcc.Client)
	id := d.Id()
	parsedPolicy, err := parsePolicyVulnerabilityImages(d, id)
	if err != nil {
		return fmt.Errorf("error updating %s policy: %s", policyTypeVulnerabilityImages, err)
	}

	if err := policy.Update(*client, policy.VulnerabilityImagesEndpoint, *parsedPolicy); err != nil {
		return err
	}

	return readPolicyVulnerabilityImages(d, meta)
}

func deletePolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	return nil
}
