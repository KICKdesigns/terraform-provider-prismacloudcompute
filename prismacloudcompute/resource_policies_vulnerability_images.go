package prismacloudcompute

import (
	"log"
	"time"

	pc "github.com/paloaltonetworks/prisma-cloud-compute-go"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/collection"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policy"
	"github.com/paloaltonetworks/prisma-cloud-compute-go/policy/policyVulnerabilityImages"

	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

func resourcePoliciesVulnerabilityImages() *schema.Resource {
	return &schema.Resource{
		Create: createPolicyVulnerabilityImages,
		Read:   readPolicyVulnerabilityImages,
		Update: updatePolicyVulnerabilityImages,
		Delete: deletePolicyVulnerabilityImages,

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(10 * time.Minute),
			Update: schema.DefaultTimeout(10 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: map[string]*schema.Schema{
			"_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "ID",
			},
			"policytype": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "policyType",
				Default:     true,
			},
			"rules": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "Rules for the policies",
				MinItems:    1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"action": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "action",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"alertthreshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "alertthreshold",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "enabled",
									},
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "disabled",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "value",
									},
								},
							},
						},
						"allcompliance": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "allCompliance",
						},
						"auditallowed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "auditAllowed",
						},
						"blockmsg": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "blockMsg",
						},
						"blockthreshold": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "blockThreshold",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "enabled",
									},
									"disabled": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "disabled",
									},
									"value": {
										Type:        schema.TypeInt,
										Optional:    true,
										Description: "value",
									},
								},
							},
						},
						"collections": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "List of collections. Used to scope the rule.",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{

									// Output.
									"accountids": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Account IDs",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"appids": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "App IDs",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"clusters": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Clusters",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"coderepos": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Code repositories",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"color": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Color",
									},
									"containers": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Containers",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Description",
									},
									"functions": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Serverless functions",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"hosts": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Hosts",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"images": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Images",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"labels": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Labels",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"modified": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Last modified date",
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Name",
									},
									"namespaces": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "Namespaces",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"owner": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Owner",
									},
									"prisma": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "Prisma",
									},
									"system": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "System",
									},
								},
							},
						},
						"condition": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "condition",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"device": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "device",
									},
									"readonly": {
										Type:        schema.TypeBool,
										Optional:    true,
										Description: "readonly",
									},
									"vulnerabilities": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "vulnerabilities",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"block": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "block",
												},
												"id": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "id",
												},
											},
										},
									},
								},
							},
						},
						"cverules": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "cveRules",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "description",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "effect",
									},
									"id": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "id",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "expiration",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "date",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
											},
										},
									},
								},
							},
						},
						"disabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "disabled",
						},
						"effect": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "effect",
						},
						"gracedays": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "graceDays",
						},
						"group": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "group",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"license": {
							Type:        schema.TypeMap,
							Optional:    true,
							Description: "license",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"alertThreshold": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "alertthreshold",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
												"disabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "disabled",
												},
												"value": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "value",
												},
											},
										},
									},
									"blockThreshold": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "blockThreshold",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
												"disabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "disabled",
												},
												"value": {
													Type:        schema.TypeInt,
													Optional:    true,
													Description: "value",
												},
											},
										},
									},
									"critical": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "critical",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"high": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "high",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"low": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "low",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
									"medium": {
										Type:        schema.TypeList,
										Optional:    true,
										Description: "medium",
										Elem: &schema.Schema{
											Type: schema.TypeString,
										},
									},
								},
							},
						},
						"modified": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "modified",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "name",
						},
						"notes": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "notes",
						},
						"onlyfixed": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "onlyFixed",
						},
						"owner": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "owner",
						},
						"previousname": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "previousName",
						},
						"principal": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "principal",
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"tags": {
							Type:        schema.TypeList,
							Optional:    true,
							Description: "tags",
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"description": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "description",
									},
									"effect": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "effect",
									},
									"expiration": {
										Type:        schema.TypeMap,
										Optional:    true,
										Description: "expiration",
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												"date": {
													Type:        schema.TypeString,
													Optional:    true,
													Description: "date",
												},
												"enabled": {
													Type:        schema.TypeBool,
													Optional:    true,
													Description: "enabled",
												},
											},
										},
									},
									"name": {
										Type:        schema.TypeString,
										Optional:    true,
										Description: "name",
									},
								},
							},
						},
						"verbose": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "verbose",
						},
					},
				},
			},
		},
	}
}

func parsePolicyVulnerabilityImages(d *schema.ResourceData, id string) policyVulnerabilityImages.Policy {
	ans := policyVulnerabilityImages.Policy{
		PolicyId: id,
	}
	if d.Get("policytype") != nil {
		ans.PolicyType = d.Get("policytype").(string)
	}

	rules := d.Get("rules").([]interface{})
	ans.Rules = make([]policy.Rule, 0, len(rules))
	if len(rules) > 0 {

		item := rules[0].(map[string]interface{})

		rule := policy.Rule{}

		if item["alertthreshold"] != nil {
			thresholdInterface := item["alertthreshold"].(interface{})
			rule.AlertThreshold = getThreshold(thresholdInterface)
		}
		if item["blockthreshold"] != nil {
			thresholdInterface := item["blockthreshold"].(interface{})
			rule.BlockThreshold = getThreshold(thresholdInterface)
		}
		if item["collections"] != nil {
			colls := item["collections"].([]interface{})

			rule.Collections = make([]collection.Collection, 0, len(colls))
			if len(colls) > 0 {
				collItem := colls[0].(map[string]interface{})

				rule.Collections = append(rule.Collections, getCollection(collItem))
			}
		}
		if item["customrules"] != nil {
			custRules := item["customrules"].([]interface{})
			rule.CustomRules = make([]policy.CustomRule, 0, len(custRules))
			if len(custRules) > 0 {
				custRuleItem := custRules[0].(map[string]interface{})

				custRule := policy.CustomRule{
					Id:     custRuleItem["_id"].(int),
					Action: custRuleItem["action"].([]string),
					Effect: custRuleItem["effect"].(string),
				}
				rule.CustomRules = append(rule.CustomRules, custRule)
			}
		}
		if item["disabled"] != nil {
			rule.Disabled = item["disabled"].(bool)
		}
		if item["filesystem"] != nil {
			fileSysSet := item["filesystem"].(interface{})
			fileSysItem := fileSysSet.(map[string]interface{})

			rule.Filesystem = policy.Filesystem{}
			if fileSysItem["blacklist"] != nil {
				rule.Filesystem.BackdoorFiles = fileSysItem["backdoorFiles"].(bool)
			}
			if fileSysItem["blacklist"] != nil {
				rule.Filesystem.Blacklist = fileSysItem["blacklist"].([]string)
			}
			if fileSysItem["checkNewFiles"] != nil {
				rule.Filesystem.CheckNewFiles = fileSysItem["checkNewFiles"].(bool)
			}
			if fileSysItem["effect"] != nil {
				rule.Filesystem.Effect = fileSysItem["effect"].(string)
			}
			if fileSysItem["skipEncryptedBinaries"] != nil {
				rule.Filesystem.SkipEncryptedBinaries = fileSysItem["skipEncryptedBinaries"].(bool)
			}
			if fileSysItem["suspiciousELFHeaders"] != nil {
				rule.Filesystem.SuspiciousELFHeaders = fileSysItem["suspiciousELFHeaders"].(bool)
			}
			if fileSysItem["whitelist"] != nil {
				rule.Filesystem.Whitelist = fileSysItem["whitelist"].([]string)
			}
		}
		if item["kubernetesenforcement"] != nil {
			rule.KubernetesEnforcement = item["kubernetesenforcement"].(bool)
		}
		if item["modified"] != nil {
			rule.Modified = item["modified"].(string)
		}
		if item["name"] != nil {
			rule.Name = item["name"].(string)
		}
		if item["network"] != nil {
			networkSet := item["network"].(interface{})
			networkItem := networkSet.(map[string]interface{})
			if networkItem["blacklistIPs"] != nil {
				rule.Network.BlacklistIPs = networkItem["blacklistIPs"].([]string)
			}

			if networkItem["blacklistListeningPorts"] != nil {
				blacklistListenPorts := networkItem["blacklistListeningPorts"].([]interface{})
				rule.Network.BlacklistListeningPorts = make([]policy.ListPort, 0, len(blacklistListenPorts))
				if len(blacklistListenPorts) > 0 {
					rule.Network.BlacklistListeningPorts = append(rule.Network.BlacklistListeningPorts, getListPort(blacklistListenPorts[0]))
				}
			}

			if networkItem["blacklistOutboundPorts"] != nil {
				blacklistOutPorts := networkItem["blacklistOutboundPorts"].([]interface{})
				rule.Network.BlacklistOutboundPorts = make([]policy.ListPort, 0, len(blacklistOutPorts))
				if len(blacklistOutPorts) > 0 {
					rule.Network.BlacklistOutboundPorts = append(rule.Network.BlacklistOutboundPorts, getListPort(blacklistOutPorts[0]))
				}
			}
			if networkItem["blacklistOutboundPorts"] != nil {
				rule.Network.DetectPortScan = networkItem["detectPortScan"].(bool)
			}
			if networkItem["effect"] != nil {
				rule.Network.Effect = networkItem["effect"].(string)
			}
			if networkItem["skipModifiedProc"] != nil {
				rule.Network.SkipModifiedProc = networkItem["skipModifiedProc"].(bool)
			}
			if networkItem["skipRawSockets"] != nil {
				rule.Network.SkipRawSockets = networkItem["skipRawSockets"].(bool)
			}
			if networkItem["whitelistIPs"] != nil {
				rule.Network.WhitelistIPs = networkItem["whitelistIPs"].([]string)
			}

			if networkItem["whitelistListeningPorts"] != nil {
				whitelistListenPorts := networkItem["whitelistListeningPorts"].([]interface{})
				rule.Network.WhitelistListeningPorts = make([]policy.ListPort, 0, len(whitelistListenPorts))
				if len(whitelistListenPorts) > 0 {
					rule.Network.WhitelistListeningPorts = append(rule.Network.WhitelistListeningPorts, getListPort(whitelistListenPorts[0]))
				}
			}

			if networkItem["whitelistOutboundPorts"] != nil {
				whitelistOutPorts := networkItem["whitelistOutboundPorts"].([]interface{})
				rule.Network.WhitelistOutboundPorts = make([]policy.ListPort, 0, len(whitelistOutPorts))
				if len(whitelistOutPorts) > 0 {
					rule.Network.WhitelistOutboundPorts = append(rule.Network.WhitelistOutboundPorts, getListPort(whitelistOutPorts[0]))
				}
			}
		}
		if item["notes"] != nil {
			rule.Notes = item["notes"].(string)
		}
		if item["owner"] != nil {
			rule.Owner = item["owner"].(string)
		}
		if item["previousname"] != nil {
			rule.PreviousName = item["previousname"].(string)
		}
		if item["processes"] != nil {
			processSet := item["processes"].(interface{})
			processItem := processSet.(map[string]interface{})

			rule.Processes = policy.Processes{}

			if processItem["blacklist"] != nil {
				rule.Processes.Blacklist = processItem["blacklist"].([]string)
			}
			if processItem["blockAllBinaries"] != nil {
				rule.Processes.BlockAllBinaries = processItem["blockAllBinaries"].(bool)
			}
			if processItem["checkCryptoMiners"] != nil {
				rule.Processes.CheckCryptoMiners = processItem["checkCryptoMiners"].(bool)
			}
			if processItem["checkLateralMovement"] != nil {
				rule.Processes.CheckLateralMovement = processItem["checkLateralMovement"].(bool)
			}
			if processItem["checkNewBinaries"] != nil {
				rule.Processes.CheckNewBinaries = processItem["checkNewBinaries"].(bool)
			}
			if processItem["checkParentChild"] != nil {
				rule.Processes.CheckParentChild = processItem["checkParentChild"].(bool)
			}
			if processItem["checkSuidBinaries"] != nil {
				rule.Processes.CheckSuidBinaries = processItem["checkSuidBinaries"].(bool)
			}
			if processItem["effect"] != nil {
				rule.Processes.Effect = processItem["effect"].(string)
			}
			if processItem["skipModified"] != nil {
				rule.Processes.SkipModified = processItem["skipModified"].(bool)
			}
			if processItem["skipReverseShell"] != nil {
				rule.Processes.SkipReverseShell = processItem["skipReverseShell"].(bool)
			}
			if processItem["whitelist"] != nil {
				rule.Processes.Whitelist = processItem["whitelist"].([]string)
			}
		}
		if item["wildfireanalysis"] != nil {
			rule.WildFireAnalysis = item["wildfireanalysis"].(string)
		}

		ans.Rules = append(ans.Rules, rule)
	}

	return ans
}

func savePolicyVulnerabilityImages(d *schema.ResourceData, obj policyVulnerabilityImages.Policy) {
	d.Set("_id", obj.PolicyId)
	d.Set("policytype", obj.PolicyType)
	d.Set("rules", obj.Rules)

	// Rule.
	if len(obj.Rules) > 0 {
		rv := map[string]interface{}{
			"advancedprotection":       obj.Rules[0].AdvancedProtection,
			"cloudmetadataenforcement": obj.Rules[0].CloudMetadataEnforcement,
			"collections":              obj.Rules[0].Collections,
			"customrules":              obj.Rules[0].CustomRules,
			"disabled":                 obj.Rules[0].Disabled,
			"dns":                      obj.Rules[0].Dns,
			"filesystem":               obj.Rules[0].Filesystem,
			"kubernetesenforcement":    obj.Rules[0].KubernetesEnforcement,
			"modified":                 obj.Rules[0].Modified,
			"name":                     obj.Rules[0].Name,
			"network":                  obj.Rules[0].Network,
			"notes":                    obj.Rules[0].Notes,
			"owner":                    obj.Rules[0].Owner,
			"previousname":             obj.Rules[0].PreviousName,
			"processes":                obj.Rules[0].Processes,
			"wildfireanalysis":         obj.Rules[0].WildFireAnalysis,
		}

		if err := d.Set("rules", []interface{}{rv}); err != nil {
			log.Printf("[WARN] Error setting 'rules' for %q: %s", d.Id(), err)
		}
	}

}

func createPolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pc.Client)
	obj := parsePolicyVulnerabilityImages(d, "")

	if err := policyVulnerabilityImages.Create(client, obj); err != nil {
		return err
	}

	PollApiUntilSuccess(func() error {
		_, err := policyVulnerabilityImages.Get(client)
		return err
	})

	pol, err := policyVulnerabilityImages.Get(client)
	if err != nil {
		return err
	}

	d.SetId(pol.PolicyId)
	return readPolicyVulnerabilityImages(d, meta)
}

func readPolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pc.Client)

	obj, err := policyVulnerabilityImages.Get(client)
	if err != nil {
		if err == pc.ObjectNotFoundError {
			d.SetId("")
			return nil
		}
		return err
	}

	savePolicyVulnerabilityImages(d, obj)

	return nil
}

func updatePolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*pc.Client)
	id := d.Id()
	obj := parsePolicyVulnerabilityImages(d, id)

	if err := policyVulnerabilityImages.Update(client, obj); err != nil {
		return err
	}

	return readPolicyVulnerabilityImages(d, meta)
}

func deletePolicyVulnerabilityImages(d *schema.ResourceData, meta interface{}) error {
	/*	client := meta.(*pc.Client)
		id := d.Id()

		err := policy.Delete(client, id)
		if err != nil {
			if err != pc.ObjectNotFoundError {
				return err
			}
		}*/

	d.SetId("")
	return nil
}

func getThreshold(thresholdInterface interface{}) policy.Threshold {
	thresholdItem := thresholdInterface.(map[string]interface{})

	threshold := policy.Threshold{}
	if thresholdItem["enabled"] != nil {
		threshold.Enabled = thresholdItem["enabled"].(bool)
	}
	if thresholdItem["disabled"] != nil {
		threshold.Disabled = thresholdItem["disabled"].(bool)
	}
	if thresholdItem["value"] != nil {
		threshold.Value = thresholdItem["value"].(int)
	}
	return threshold
}
